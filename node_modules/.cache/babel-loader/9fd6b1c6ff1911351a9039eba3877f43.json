{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport movieAPI from \"../../../services/movieAPI\";\nconst initialState = {\n  movies: [],\n  isLoading: false,\n  error: null\n}; // Tạo action thông qua createAsyncThunk\n\nexport const getMovies = createAsyncThunk(\"movieShowing/getMovies\", async () => {\n  const data = await movieAPI.getShowing();\n  return {\n    data\n  };\n});\nconst movieSlice = createSlice({\n  name: \"movieShowing\",\n  initialState,\n  // reducers: {\n  // getMovieRequest(state, action) {\n  //   state.isLoading = true;\n  // },\n  // getMovieSuccess(state, action) {\n  //   state.movies = action.payload.data;\n  //   state.isLoading = false;\n  // },\n  // getMovieFailure(state, action) {\n  //   state.error = action.payload.error;\n  //   state.isLoading = false;\n  // },\n  // },\n  extraReducers: {\n    [getMovies.pending]: (state, action) => {\n      state.isLoading = true;\n    },\n    [getMovies.fulfilled]: (state, action) => {\n      state.movies = action.payload.data;\n      state.isLoading = false;\n    },\n    [getMovies.rejected]: (state, action) => {\n      state.error = action.error.message;\n      state.isLoading = false;\n    }\n  }\n}); // export const { getMovieRequest, getMovieSuccess, getMovieFailure } =\n//   movieSlice.actions;\n\nexport default movieSlice.reducer; // Đây là cách sử dụng action thunk thông thường\n// export const getMovies = () => {\n//   return async (dispatch) => {\n//     dispatch(getMovieRequest());\n//     // Gọi API\n//     try {\n//       const data = await movieAPI.getShowing();\n//       console.log(data);\n//       // Thành công set data từ API cho movies và set loading lại thành false\n//       dispatch(getMovieSuccess({ data }));\n//     } catch (error) {\n//       // Thất bại set error và loading thành false\n//       dispatch(getMovieFailure({ error }));\n//     }\n//   };\n// };","map":{"version":3,"sources":["C:/Users/Admin/Desktop/moi/reactMovieCyberFulll/src/modules/HomePage/slices/movieSlice.js"],"names":["createSlice","createAsyncThunk","movieAPI","initialState","movies","isLoading","error","getMovies","data","getShowing","movieSlice","name","extraReducers","pending","state","action","fulfilled","payload","rejected","message","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB,C,CAMA;;AACA,OAAO,MAAMC,SAAS,GAAGN,gBAAgB,CACvC,wBADuC,EAEvC,YAAY;AACV,QAAMO,IAAI,GAAG,MAAMN,QAAQ,CAACO,UAAT,EAAnB;AACA,SAAO;AAAED,IAAAA;AAAF,GAAP;AACD,CALsC,CAAlC;AAQP,MAAME,UAAU,GAAGV,WAAW,CAAC;AAC7BW,EAAAA,IAAI,EAAE,cADuB;AAE7BR,EAAAA,YAF6B;AAG7B;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACAS,EAAAA,aAAa,EAAE;AACb,KAACL,SAAS,CAACM,OAAX,GAAqB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAACT,SAAN,GAAkB,IAAlB;AACD,KAHY;AAIb,KAACE,SAAS,CAACS,SAAX,GAAuB,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACV,MAAN,GAAeW,MAAM,CAACE,OAAP,CAAeT,IAA9B;AACAM,MAAAA,KAAK,CAACT,SAAN,GAAkB,KAAlB;AACD,KAPY;AAQb,KAACE,SAAS,CAACW,QAAX,GAAsB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACT,KAAP,CAAaa,OAA3B;AACAL,MAAAA,KAAK,CAACT,SAAN,GAAkB,KAAlB;AACD;AAXY;AAhBc,CAAD,CAA9B,C,CA+BA;AACA;;AAEA,eAAeK,UAAU,CAACU,OAA1B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport movieAPI from \"../../../services/movieAPI\";\n\nconst initialState = {\n  movies: [],\n  isLoading: false,\n  error: null,\n};\n\n// Tạo action thông qua createAsyncThunk\nexport const getMovies = createAsyncThunk(\n  \"movieShowing/getMovies\",\n  async () => {\n    const data = await movieAPI.getShowing();\n    return { data };\n  }\n);\n\nconst movieSlice = createSlice({\n  name: \"movieShowing\",\n  initialState,\n  // reducers: {\n    // getMovieRequest(state, action) {\n    //   state.isLoading = true;\n    // },\n    // getMovieSuccess(state, action) {\n    //   state.movies = action.payload.data;\n    //   state.isLoading = false;\n    // },\n    // getMovieFailure(state, action) {\n    //   state.error = action.payload.error;\n    //   state.isLoading = false;\n    // },\n  // },\n  extraReducers: {\n    [getMovies.pending]: (state, action) => {\n      state.isLoading = true;\n    },\n    [getMovies.fulfilled]: (state, action) => {\n      state.movies = action.payload.data;\n      state.isLoading = false;\n    },\n    [getMovies.rejected]: (state, action) => {\n      state.error = action.error.message;\n      state.isLoading = false;\n    },\n  },\n});\n\n// export const { getMovieRequest, getMovieSuccess, getMovieFailure } =\n//   movieSlice.actions;\n\nexport default movieSlice.reducer;\n\n// Đây là cách sử dụng action thunk thông thường\n// export const getMovies = () => {\n//   return async (dispatch) => {\n//     dispatch(getMovieRequest());\n//     // Gọi API\n//     try {\n//       const data = await movieAPI.getShowing();\n//       console.log(data);\n\n//       // Thành công set data từ API cho movies và set loading lại thành false\n//       dispatch(getMovieSuccess({ data }));\n//     } catch (error) {\n//       // Thất bại set error và loading thành false\n//       dispatch(getMovieFailure({ error }));\n//     }\n//   };\n// };\n"]},"metadata":{},"sourceType":"module"}