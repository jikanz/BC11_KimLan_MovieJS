{"ast":null,"code":"import axios from \"axios\";\nimport qs from \"query-string\"; // Setup những cấu hình mặc định cho axios\n\nconst axiosClient = axios.create({\n  baseURL: \"https://movienew.cybersoft.edu.vn/api/\",\n  headers: {\n    TokenCybersoft: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5Mb3AiOiJCb290Y2FtcCAxMSIsIkhldEhhblN0cmluZyI6IjIxLzAyLzIwMjIiLCJIZXRIYW5UaW1lIjoiMTY0NTQwMTYwMDAwMCIsIm5iZiI6MTYxODI0NjgwMCwiZXhwIjoxNjQ1NTQ5MjAwfQ.5mU9BqyLzddQpvu47bSES-4soazP--DtpP9aqF-U6wQ\"\n  },\n  paramsSerializer: params => {\n    // Override lại cách axios set params lên url\n    return qs.stringify(params, {\n      skipEmptyString: true,\n      skipNull: true\n    });\n  }\n}); // Add a request interceptor\n\naxiosClient.interceptors.request.use(config => {\n  // Do something before request is sent\n  const userJson = localStorage.getItem(\"user\");\n\n  if (userJson) {\n    const {\n      accessToken\n    } = JSON.parse(userJson);\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n\n  return config;\n}, error => {\n  // Do something with request error\n  return Promise.reject(error);\n}); // Add a response interceptor\n\naxiosClient.interceptors.response.use(response => {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  console.log(response);\n  return response.data.content;\n}, error => {\n  // Any status codes that falls outside the range of 2xx cause this function to trigger\n  // Do something with response error\n  // Sử lý lỗi nếu API thất bại ngay đây nếu muốn\n  return Promise.reject(error.response.data.content);\n});\nexport default axiosClient;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/reactBuoi15/src/services/axiosClient.js"],"names":["axios","qs","axiosClient","create","baseURL","headers","TokenCybersoft","paramsSerializer","params","stringify","skipEmptyString","skipNull","interceptors","request","use","config","userJson","localStorage","getItem","accessToken","JSON","parse","Authorization","error","Promise","reject","response","console","log","data","content"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,cAAf,C,CAEA;;AACA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAE,wCADsB;AAE/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,cAAc,EACZ;AAFK,GAFsB;AAM/BC,EAAAA,gBAAgB,EAAGC,MAAD,IAAY;AAC5B;AACA,WAAOP,EAAE,CAACQ,SAAH,CAAaD,MAAb,EAAqB;AAAEE,MAAAA,eAAe,EAAE,IAAnB;AAAyBC,MAAAA,QAAQ,EAAE;AAAnC,KAArB,CAAP;AACD;AAT8B,CAAb,CAApB,C,CAYA;;AACAT,WAAW,CAACU,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CACGC,MAAD,IAAY;AACV;AACA,QAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAjB;;AACA,MAAIF,QAAJ,EAAc;AACZ,UAAM;AAAEG,MAAAA;AAAF,QAAkBC,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAxB;AACAD,IAAAA,MAAM,CAACV,OAAP,CAAeiB,aAAf,GAAgC,UAASH,WAAY,EAArD;AACD;;AAED,SAAOJ,MAAP;AACD,CAVH,EAWGQ,KAAD,IAAW;AACT;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAdH,E,CAiBA;;AACArB,WAAW,CAACU,YAAZ,CAAyBc,QAAzB,CAAkCZ,GAAlC,CACGY,QAAD,IAAc;AACZ;AACA;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,SAAOA,QAAQ,CAACG,IAAT,CAAcC,OAArB;AACD,CAPH,EAQGP,KAAD,IAAW;AACT;AACA;AAEA;AAEA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAK,CAACG,QAAN,CAAeG,IAAf,CAAoBC,OAAnC,CAAP;AACD,CAfH;AAkBA,eAAe5B,WAAf","sourcesContent":["import axios from \"axios\";\nimport qs from \"query-string\";\n\n// Setup những cấu hình mặc định cho axios\nconst axiosClient = axios.create({\n  baseURL: \"https://movienew.cybersoft.edu.vn/api/\",\n  headers: {\n    TokenCybersoft:\n      \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5Mb3AiOiJCb290Y2FtcCAxMSIsIkhldEhhblN0cmluZyI6IjIxLzAyLzIwMjIiLCJIZXRIYW5UaW1lIjoiMTY0NTQwMTYwMDAwMCIsIm5iZiI6MTYxODI0NjgwMCwiZXhwIjoxNjQ1NTQ5MjAwfQ.5mU9BqyLzddQpvu47bSES-4soazP--DtpP9aqF-U6wQ\",\n  },\n  paramsSerializer: (params) => {\n    // Override lại cách axios set params lên url\n    return qs.stringify(params, { skipEmptyString: true, skipNull: true });\n  },\n});\n\n// Add a request interceptor\naxiosClient.interceptors.request.use(\n  (config) => {\n    // Do something before request is sent\n    const userJson = localStorage.getItem(\"user\");\n    if (userJson) {\n      const { accessToken } = JSON.parse(userJson);\n      config.headers.Authorization = `Bearer ${accessToken}`;\n    }\n\n    return config;\n  },\n  (error) => {\n    // Do something with request error\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor\naxiosClient.interceptors.response.use(\n  (response) => {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n\n    console.log(response);\n    return response.data.content;\n  },\n  (error) => {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n\n    // Sử lý lỗi nếu API thất bại ngay đây nếu muốn\n\n    return Promise.reject(error.response.data.content);\n  }\n);\n\nexport default axiosClient;\n"]},"metadata":{},"sourceType":"module"}